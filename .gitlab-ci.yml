stages:
    - analyse
    - prebuild
    - setup
    - build
    - deploy

before_script:
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD  $DOCKER_HUB_URL

lint:
    stage: analyse
    image: node:16-slim
    allow_failure: true
    variables:
        GITLAB_TOKEN: $CI_JOB_TOKEN
    before_script: [""]
    script:
        - npm install
        - npm run lint

# sonarqubeCheck:
#     stage: analyse
#     image:
#         name: sonarsource/sonar-scanner-cli:latest
#         entrypoint: [""]
#     variables:
#         SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
#         GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
#     cache:
#         key: "${CI_JOB_NAME}"
#         paths:
#             - .sonar/cache
#     before_script: [""]
#     script:
#         - sonar-scanner
#     allow_failure: true

buildBaseImage:
    stage: prebuild
    image: docker:19.03.1
    needs: ["lint"]
    services:
        - docker:19.03.1-dind
    variables:
        DOCKER_HOST: tcp://docker:2375
        DOCKER_TLS_CERTDIR: ""
        GITLAB_TOKEN: $CI_JOB_TOKEN
    script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker pull $CI_REGISTRY_IMAGE/builder:$CI_COMMIT_REF_SLUG || true
        - docker build --cache-from $CI_REGISTRY_IMAGE/builder:$CI_COMMIT_REF_SLUG --build-arg=GITLAB_TOKEN --tag $CI_REGISTRY_IMAGE/builder:$CI_COMMIT_REF_SLUG -f Dockerfile.builder .
        - docker push $CI_REGISTRY_IMAGE/builder:$CI_COMMIT_REF_SLUG 

build:
  stage: build
  image: docker:19.03.1
  needs: ["buildBaseImage"]
  services:
        - docker:19.03.1-dind
  variables:
        DOCKER_HOST: tcp://docker:2375
        DOCKER_TLS_CERTDIR: \"\"
        BASE_URL: \"/\"
  script:
        - docker login -u \$CI_REGISTRY_USER -p \$CI_REGISTRY_PASSWORD \$CI_REGISTRY
        - docker build --build-arg=BASE_URL --build-arg=CI_COMMIT_REF_SLUG --build-arg=CI_COMMIT_SHA --build-arg=BUILD_DATE --tag \$CI_REGISTRY_IMAGE:\$CI_COMMIT_SHA .
        - docker push \$CI_REGISTRY_IMAGE:\$CI_COMMIT_SHA

pushImage:
  stage: push
  image: docker:19.03.1
  needs: ["build"]
  services:
        - docker:19.03.1-dind
  variables:
        DOCKER_HOST: tcp://docker:2375
        DOCKER_TLS_CERTDIR: \"\"
        BASE_URL: \"/\"
  script:
        - docker login -u \$CI_REGISTRY_USER -p \$CI_REGISTRY_PASSWORD \$CI_REGISTRY
        - export TAG_NAME=latest
        - docker pull \$CI_REGISTRY_IMAGE:\$CI_COMMIT_SHA
        - docker tag \$CI_REGISTRY_IMAGE:\$CI_COMMIT_SHA \$CI_REGISTRY_IMAGE:\$TAG_NAME
        - docker push \$CI_REGISTRY_IMAGE:\$TAG_NAME
        - docker login -u \$AZURE_REGISTRY_USERNAME -p \$AZURE_REGISTRY_PASSWORD \$AZURE_REGISTRY_URL
        - docker tag \$CI_REGISTRY_IMAGE:\$CI_COMMIT_SHA \$AZURE_REGISTRY_URL:\$TAG_NAME
        - docker push \$AZURE_REGISTRY_URL:\$TAG_NAME

deploy:
  stage: deploy
  needs: ["pushImage"]
  image: alpine/k8s:1.25.15
  before_script: [\"\"]
  script:
    - export KUBECONFIG=\$KUBE_CONFIG_PROD;
    - helm repo add fws-charts \$HELM_REPO_URL --username \$HELM_REPO_USER --password \$HELM_REPO_PASS;
    - export HELM_VERSION=$(helm list -A | sed 's/\s\+/ /g' | cut -d' ' -f2,9 | grep 'fws' | cut -d' ' -f2)
    - helm upgrade fws fws-charts/fws --namespace fws --reuse-values --set=fws.tag=\$CI_COMMIT_TAG --version $HELM_VERSION;
